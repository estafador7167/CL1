(gen-class)
(defn Example[]
  (def cust "2|Sue Jones|43 Rue court street|5653-6763-565\n3|Fan Yuhong|165 Happy Lane|6763-673-87\n1|John Smith|64 Here street|256-278-68")
  (def x(clojure.string/split-lines cust))
  (def num1(count x))
  (def temp1 num1)
  (def a1(atom 0))
  (defn abc[num1]
   (def a2(clojure.string/split (get x @a1) #"\|"))
   (def a3(Integer/parseInt(get a2 0)))
   (def a4(str (get a2 1) "," (get a2 2) "," (get a2 3)))
   (if(= 0 @a1)
         (def customern(sorted-map (get a2 1) a3))
         (def customern(assoc customern (get a2 1) a3)))
   (if(= 0 @a1)
          (def customeri(sorted-map a3 (get a2 1)))
          (def customeri(assoc customeri a3 (get a2 1))))
   (if(= 0 @a1)
         (def area1(sorted-map a3 a4))
         (def area1(assoc area1 a3 a4 )))
   (if(= 0 @a1)
         (def cv(vector a3))
         (def cv(sort(conj cv a3 ))))
   (swap! a1 inc)
    (if(< 1 num1)
         ( abc(dec num1))))
 (abc num1)
 (defn q1[temp1]
   (def k(atom 0))
   (def num31 temp1)
   (defn q11[num31]
      (print (nth cv @k) ":[")
      (println (get area1 (nth cv @k))"]")
      (swap! k inc)
      (if(< 1 num31)
         (q11(dec num31))))
      (q11 num31))
;;(q1 temp1)
 ;;prod...................................
 (def prod "3|jam|2.99\n5|eggs|2.98\n1|shoes|14.96\n6|jacket|42.99\n2|milk|1.98\n4|gum|1.25")
 (def y(clojure.string/split-lines prod))
 (def num2(count y))
 (def temp2 num2)
 (def b1(atom 0))
 (defn abc1[num2]
   (def b2(clojure.string/split (get y @b1) #"\|"))
   (def b3(Integer/parseInt(get b2 0)))
   (def b4(str (get b2 1) "," (get b2 2)))
   (if(= 0 @b1)
         (def productu(sorted-map b3 (Float/parseFloat(get b2 2))))
         (def productu(assoc productu b3 (Float/parseFloat(get b2 2)))))
   (if(= 0 @b1)
         (def producti(sorted-map b3 (get b2 1)))
         (def producti(assoc producti b3 (get b2 1))))
   (if (= 0 @b1)
          (def productc(sorted-map (get b2 1) (Float/parseFloat(get b2 2))))
          (def productc(assoc productc (get b2 1) (Float/parseFloat(get b2 2)))))
   (if(= 0 @b1)
         (def area2(sorted-map b3 b4))
         (def area2(assoc area2 b3 b4)))
   (if(= 0 @b1)
         (def pv(sort(vector b3)))
         (def pv(sort(conj pv b3))))
    (swap! b1 inc)   
    (if(< 1 num2)
          (abc1(dec num2))))
  (abc1 num2)
  (defn q2[temp2]
    (def l(atom 0))
    (def num32 temp2)
    (defn q22[num32]
      (print(nth pv @l)":[")
      (println (get area2 (nth pv @l))"]")
      (swap! l inc)
      (if(< 1 num32)
            (q22(dec num32))))
    (q22 num32))
  ;;(q2 temp2)
  ;;sales............
  (def sales "1|1|1|3\n2|2|2|3\n3|2|1|1\n4|3|3|4")
  (def z(clojure.string/split-lines sales))
  (def num3(count z))
  (def temp3 num3)
  (def c1(atom 0))
  (defn abc2[num3]
    (def c2(clojure.string/split (get z @c1) #"\|"))
    (def c3(Integer/parseInt(get c2 0)))
    (def d1(Integer/parseInt(get c2 1)))
    (def d2(Integer/parseInt(get c2 2)))
    (def d4(Integer/parseInt(get c2 3)))
    (def e1(get customeri d1))
    (def e2(get producti d2))
    (def c4(str e1 "," e2 "," d4))
    (if(= 0 @c1)
          (def salesi(sorted-map c3 e1))
          (def salesi(assoc salesi c3 e1)))
    (if(= 0 @c1)
          (def salesu(sorted-map c3 e2))
          (def salesu(assoc salesu c3 e2)))
    (if(= 0 @c1)
          (def salesc(sorted-map c3 d4))
          (def salesc(assoc salesc c3 d4)))
    (if(= 0 @c1)
          (def area3(sorted-map c3 c4))
          (def area3(assoc area3 c3 c4)))
    (if(= 0 @c1)
          (def sv(vector c3))
          (def sv(sort(conj sv c3))))
    (swap! c1 inc)
    (if(< 1 num3)
          (abc2(dec num3))))
  (abc2 num3)
  (defn q3[temp3]
    (def m(atom 0))
    (def num33 temp3)
    (defn q33[num33]
      (print (nth sv @m)":[")
      (println (get area3 (nth sv @m))"]")
      (swap! m inc)
      (if(< 1 num33)
            (q33(dec num33))))
      (q33 num33))
 ;; (q3 temp3)
  ;;total amount.......
  (defn q5[]
    (println "Enter the Product:")
    (def text1(read-line))
    (def f1(atom 0))
    (def num35 temp3)
    (def sum1 0.0)
    (defn q55[num35]
      (def f3(get salesu(nth sv @f1)))
      (if(= text1 f3)
         (do 
           (def f2(get salesc(nth sv @f1)))
           (def sum1(+ sum1 f2))))
      (swap! f1 inc)
      (if(< 1 num35)
            (q55(dec num35))))
    (q55 num35)
    (println text1 ":" sum1))
 ;; (q5)
 (defn q4[]
   (println "Enter the customer name")
   (def text2(read-line))
   (def g1(atom 0))
   (def num36 temp3)
   (def sum2 0)
   (defn q44[num36]
     (if(= text2 (get salesi(nth sv @g1)))
           (do(def g2(get salesu(nth sv @g1)))
              (def g3(get productc g2))
              (def g4(get salesc(nth sv @g1)))
              (def sum2(+ sum2 (* g3 g4)))))
     (swap! g1 inc)
     (if(< 1 num36)
           (q44(dec num36))))
    (q44 num36)
    (println text2 ":" sum2))
;; (q4)
 (defn menu[]
   (println "**** Sales Menu****\n-------------------")
   (println "1.Display Customer Table\n2.Display Product Table\n3.Display Sales Table\n4.Total Sales for Customer\n5.Total Count for Product\n6.Exit\nEnter a option?")
   (def choice(read-line))
   (case choice "1" (q1 temp1)
         "2" (q2 temp2)
         "3" (q3 temp3)
         "4" (q4)
         "5" (q5)
         (menu))
    (menu)
 )
(menu))
(Example)